package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;
    JoinPredicate p;
    DbIterator child1;
    DbIterator child2;
    TupleDesc td;

    Tuple lastChild1 = null;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        td = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        try {
            return child1.getTupleDesc().getFieldName(p.getField1());
        } catch (NoSuchElementException e) {}
        return null;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        try {
            return child2.getTupleDesc().getFieldName(p.getField2());
        } catch (NoSuchElementException e) {}
        return null;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return td;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
        lastChild1 = null;
    }

    public void close() {
        // some code goes here
        super.close();
        child1.close();
        child2.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
        lastChild1 = null;
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        Tuple tup1 = null;
        Tuple tup2 = null;
        while (child1.hasNext() || lastChild1 != null) {
            if (lastChild1 == null) {
                tup1 = child1.next();
                lastChild1 = tup1;
            }
            else {
                tup1 = lastChild1;
            }
            
            while(child2.hasNext()) {
                tup2 = child2.next();
                if (p.filter(tup1, tup2)) {
                    lastChild1 = tup1;
                    return setTuple(tup1, tup2);
                }
            }
            child2.rewind();
            lastChild1 = null;
        }
        return null;
    }

    private Tuple setTuple(Tuple t1, Tuple t2) {
        Tuple ret = new Tuple(td);
        int totalFields = td.numFields();
        int t1Fields = t1.getTupleDesc().numFields();

        int i = 0;
        for (i = 0; i < t1Fields; i++) {
            ret.setField(i, t1.getField(i));
        }
        for (int j = 0; j < (totalFields - t1Fields); j++) {
            ret.setField(i+j, t2.getField(j));
        }
        return ret;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] { this.child1, this.child2 };
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        this.child1 = children[0];
        this.child2 = children[1];
    }

}
